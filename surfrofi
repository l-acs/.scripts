#!/bin/bash
search="duckduckgo.com/?q="
bookmarks="~/.surf/bookmarks-nicknames.txt"
engines="~/.surf/engines-nicknames.txt"

#so i think the way this works is that if it takes an argument to the script is should do the thing. rofi will then pass the argument to the script when it is selected.

#i.e. these scripts must be designed as two-pronged
# a) check if there's arguments. if if there are, do something with them
# b) otherwise, output a list of options


#note::: back sure in case a) to run as background processes!!!!

selection="$@"

#if there is an input and it contains a URL, open it. 
if echo "$selection" | grep -q '\.'; then
	surf "$(echo "$selection" | tr -s "[:blank:]" ' ' | cut -f2 -d ' ')" &>/dev/null &

#otherwise use the term as a search query
elif [ -n "$selection" ]; then

	#if the first word of the selection is among a user's listed search engines, use that URL for search
	patternmatch="$(cat "$engines" | tr -s "[:blank:]" ' ' | grep "^$(echo "$selection" | cut -f1 -d ' ') ")"
	[ -n "$patternmatch" ] && search="$(echo "$patternmatch" | cut -f2 -d ' ')" && selection="$(echo "$selection" | cut -f2- -d ' ')"
	
	surf "$search$selection" &>/dev/null &
else
	sed '/^#/d' "$bookmarks" "$engines"


fi





















#prompt user with dmenu for input, reading from a list of preferred sites and their nicknames




